/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
  ignore_case = true;  static = true;}PARSER_BEGIN(PhysParser)
import java.util.*;
import java.io.*;
public class PhysParser{  public static void main(String args []) throws ParseException  {
    try    {    	PhysParser parser;
    
    	HashMap variables = new HashMap();	
		boolean valid = true;
	
    	if (args.length == 0) {
    		parser = new PhysParser(System.in);
		}
    	else {
    		parser = new PhysParser(new java.io.FileInputStream(args[0]));
		}

		while (valid) {
			valid = parser.read(variables);
		}
    }
   	catch (Throwable e)
    {
     	System.out.println(e.getMessage());
    }  }}PARSER_END(PhysParser)SKIP :{  "\r"| "\t"| "\n"}TOKEN : /* Operators */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < QUESTION : "is " >
| < EQUALLITY : <EQUAL> | <NOT> > // Add greater than and less than
| < #EQUAL : "equal to " >
| < #NOT : "not equal to " >
| < WITH : "with" >
| < RETURN : "return" >}
TOKEN: /* Objects and Vectors */
{
  < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
| < OBJECT : "object" | "vector" >
| < ATTRIBUTE : "acceleration" | "initial velocity" | "initial position" | "final velocity"
			  | "final position" | "mass" | "time moved" | "x component" | "y component"
			  | "angle" | "magnitude" | "displacement" | "initial time" | "final time" | "average velocity" > // Correct}

TOKEN: /* Doubles */
{
    <DOUBLE: <SIGNED> ( "." (<DIGIT>)+ )? >
|   <DIGIT: ["0"-"9"] >
| 	<SIGNED: ("-")? (<DIGIT>)+>
}
boolean read(HashMap variables):
{}
{
  	(Statement(variables) (".")?)+ { return true; }
|   "Terminate" { return false; }
|   <EOF> { return false; }}

void Statement(HashMap variables):{
  Token obj=null, ident=null, attr=null, val=null;
}
{
  "define " ident=<ID> " as " obj=<OBJECT>  {
    if(obj.image.equals("object"))    {	  variables.put(ident.image, new PhysPObject());
    }
    else if(obj.image.equals("vector"))
    {	  variables.put(ident.image, new PhysPVector());
    }// Else exception invalid object  }
|
  ident=<ID> " with " attr=<ATTRIBUTE> " " val=<DOUBLE>  {
    if(variables.containsKey(ident.image)) {	  if(variables.get(ident.image) instanceof PhysPObject)
      {
        PhysPObject physpObject = (PhysPObject) variables.get(ident.image);
        physpObject.setVariable(Double.parseDouble(val.image), attr.image);
		variables.put(ident.image, physpObject);
      }
      else if(variables.get(ident.image) instanceof PhysPVector)
      {
		PhysPVector physpVector = (PhysPVector) variables.get(ident.image);
        physpVector.setVariable(Double.parseDouble(val.image), attr.image);
		variables.put(ident.image, physpVector);
      }
    }// Else exception invalid id
  }
|
  "return " ident=<ID> " " attr=<ATTRIBUTE>
  {
    if(variables.containsKey(ident.image))
    {
      double result = Double.NaN;	  if(variables.get(ident.image) instanceof PhysPObject)
      {
        PhysPObject physpObject = (PhysPObject)variables.get(ident.image);
        result = physpObject.getVariable(attr.image);
	    variables.put(ident.image, physpObject);
      }
      else if(variables.get(ident.image) instanceof PhysPVector)
      {
		PhysPVector physpVector = (PhysPVector)variables.get(ident.image);
        result = physpVector.getVariable(attr.image);
		variables.put(ident.image, physpVector);
      }
      if(result != Double.NaN)      {		System.out.println(result);
      }
    }// Else exception invalid id  }
|
  <QUESTION> ident=<ID> " " attr=<ATTRIBUTE> " " <EQUALLITY> val=<DOUBLE>  {
    if(variables.containsKey(ident.image))    {
      double result = Double.NaN;	  if(variables.get(ident.image) instanceof PhysPObject)
      {
        PhysPObject physpObject = (PhysPObject)variables.get(ident.image);
        result = physpObject.getVariable(attr.image);
		variables.put(ident.image, physpObject);
      }
      else if(variables.get(ident.image) instanceof PhysPVector)
      {
		PhysPVector physpVector = (PhysPVector)variables.get(ident.image);
        result = physpVector.getVariable(attr.image);
		variables.put(ident.image, physpVector);
      }
      if(result != Double.NaN)      {		if(result == Double.parseDouble(val.image)) // Verify Equality
        {
			System.out.println("True.");
        }
        else
        {
			System.out.println("False.");
        }
      }
    }  }
}