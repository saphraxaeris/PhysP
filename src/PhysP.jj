/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
  ignore_case = true;  static = true;}PARSER_BEGIN(PhysParser)
import java.util.*;
import java.io.*;
public class PhysParser{  public static void main(String args []) throws ParseException  {
    try    {    	PhysParser parser;
    
    	HashMap variables = new HashMap();	
		boolean valid = true;
	
    	if (args.length == 0) {
    		parser = new PhysParser(System.in);
		}
    	else {
    		parser = new PhysParser(new java.io.FileInputStream(args[0]));
		}

		System.out.println(ColorCodes.CYAN + "Welcome to PhysP. Scanner open." + ColorCodes.RESET);
		
		while (valid) {
			valid = parser.read(variables);
		}

		System.out.println(ColorCodes.CYAN + "Terminating scanner." + ColorCodes.RESET);
    }
   	catch (Throwable e)
    {
     	System.out.println(e.getMessage());
    }  }}PARSER_END(PhysParser)SKIP :{
 " " | "\t" | "\n" | "\r" | <"--" (~["\n","\r"])* ("\n"|"\r")>}
TOKEN : /* Keywords */
{  < DEFINE: "define " >
| < AS: " as " >
}
TOKEN : /* Operators */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < QUESTION : "is " >
| < EQUALLITY : <EQUAL> | <NOT> | <GREATER> | <LESS> | <GREATEREQUAL> | <LESSEQUAL> >
| < #EQUAL : "equal to" >
| < #NOT : "not equal to" >
| < #GREATER: "greater than" >
| < #GREATEREQUAL: "greater than or equal to" >
| < #LESS: "less than" >
| < #LESSEQUAL: "less than or equal to" >
| < WITH : "with" >
| < RETURN : "return" >
| < TERMINATE : "terminate">}

TOKEN: /* Measurements */
{
    < MEASUREMENT :  <FORCEMEASURE> | <ACCELMEASURE> | <VELMEASURE> | <DISTANCEMEASURE> | <TIMEMEASURE> >
|   < #FORCEMEASURE : "N" | "pound" >
|   < #ACCELMEASURE: "cm/s^2" | "m/s^2" | "ft/s^2" | "ft/min^2" | "mi/h^2" | "km/h^2" >
|   < #VELMEASURE: "cm/s" | "m/s" | "ft/s" | "ft/min" | "mi/h" | "km/h" >
|   < #DISTANCEMEASURE: "cm" | "m" | "km" | "mi" | "in" | "ft" >
|   < #TIMEMEASURE : "s" | "min" | "hr" >
|   < #ANGLEMEASURE : "degrees" | "radians" >
}
TOKEN: /* Objects and Vectors */
{
  < OBJECT : "object" | "vector" >
| < ATTRIBUTE : "acceleration" | "initial velocity" | "initial position" | "final velocity"
			  | "final position" | "time moved" | "x component" | "y component"
			  | "angle" | "magnitude" | "displacement" | "initial time" | "final time" | "average velocity" >
| < ID: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])* >}


TOKEN: /* Doubles */
{
    <DOUBLE: <SIGNED> ( "." (<DIGIT>)+ )? >
|   <DIGIT: ["0"-"9"] >
| 	<SIGNED: ("-")? (<DIGIT>)+>
}
boolean read(HashMap variables):
{}
{
    <TERMINATE> { return false; }
|   (Statement(variables) (".")?)+ { return true; }

|   <EOF> { return false; }}

void Statement(HashMap variables):{
  Token obj=null, ident=null, attr=null, val=null, msr=null, eql=null;
}
{
  "define "ident=<ID>" as "obj=<OBJECT>  {
    if(obj.image.equals("object")) {	  variables.put(ident.image, new PhysPObject());
    }
    else if(obj.image.equals("vector")) {	  variables.put(ident.image, new PhysPVector());
    }
    else {
      System.out.println(ColorCodes.RED + "Invalid data type." + ColorCodes.RESET);    }  }
|
  ident=<ID> " with " attr=<ATTRIBUTE> val=<DOUBLE> msr=<MEASUREMENT>  {
    if(variables.containsKey(ident.image)) {
      double result = Double.NaN;
	  double temp = Double.parseDouble(val.image);	  if(variables.get(ident.image) instanceof PhysPObject) {
	    if(attr.image.contains("position") || attr.image.equals("displacement")){
		  result = Converter.Distance(msr.image, "m", temp);	    }
	    else if (attr.image.contains("velocity")){		  result = Converter.Velocity(msr.image, "m/s", temp);
	    }
	    else if (attr.image.contains("time")){
		  result = Converter.Time(msr.image, "s", temp);		 
	    }
	    else if (attr.image.equals("acceleration")){
		  result = Converter.Acceleration(msr.image, "m/s^2", temp);
	    }
	    else {			System.out.println(ColorCodes.RED + "Invalid mesurement for data type." + ColorCodes.RESET);
	    }
	    if(!Double.isNaN(result)) {
	      PhysPObject physpObject = (PhysPObject) variables.get(ident.image);
          physpObject.setVariable(result, attr.image);
		  variables.put(ident.image, physpObject);	    }
	    else {		  System.out.println(ColorCodes.RED + "Cannot perform conversion for specified attribute." + ColorCodes.RESET);
	    }
      }
      else if(variables.get(ident.image) instanceof PhysPVector) {
        if(attr.image.equals("magnitude") || attr.image.contains("component")){
 		  result = Converter.Force(msr.image, "N", temp);
	    }
	    else if (attr.image.equals("angle")){
		  result = Converter.Angle(msr.image, "degrees", temp);
	    }
	    else {
			System.out.println(ColorCodes.RED + "Invalid mesurement for data type." + ColorCodes.RESET);
	    }
		if(!Double.isNaN(result)) {
		  PhysPVector physpVector = (PhysPVector) variables.get(ident.image);
          physpVector.setVariable(result, attr.image);
		  variables.put(ident.image, physpVector);		}
		else {
		  System.out.println(ColorCodes.RED + "Cannot perform conversion for specified attribute." + ColorCodes.RESET);
	    }
      }
    }
    else {
      System.out.println(ColorCodes.RED + "Invalid identifier." + ColorCodes.RESET);
    }
  }
|
  "return " ident=<ID> attr=<ATTRIBUTE> msr=<MEASUREMENT>
  {
    if(variables.containsKey(ident.image)) {
      double temp = Double.NaN;
      double result = Double.NaN;	  if(variables.get(ident.image) instanceof PhysPObject) {
        PhysPObject physpObject = (PhysPObject)variables.get(ident.image);
        temp = physpObject.getVariable(attr.image);
        if(!Double.isNaN(temp)) {			variables.put(ident.image, physpObject);
			if(attr.image.contains("position") || attr.image.equals("displacement")){
		  		result = Converter.Distance("m", msr.image, temp);
	    	}
	    	else if (attr.image.contains("velocity")){
		  		result = Converter.Velocity("m/s", msr.image, temp);
	    	}
	    	else if (attr.image.contains("time")){
		  		result = Converter.Time("s", msr.image, temp);		 
	    	}
	    	else if (attr.image.equals("acceleration")){
		  	result = Converter.Acceleration("m/s^2", msr.image, temp);
	    	}
	    	else {
				System.out.println(ColorCodes.RED + "Invalid mesurement for data type." + ColorCodes.RESET);
	    	}
	    	if(!Double.isNaN(result)) {
        		variables.put(ident.image, physpObject);
				System.out.println(ColorCodes.GREEN + result + ColorCodes.RESET);
      		}
      		else {
				System.out.println(ColorCodes.RED + "Cannot perform conversion for specified attribute." + ColorCodes.RESET);
	  		}
        }
      }
      else if(variables.get(ident.image) instanceof PhysPVector) {
		PhysPVector physpVector = (PhysPVector)variables.get(ident.image);
        temp = physpVector.getVariable(attr.image);
		if(!Double.isNaN(temp)) {			variables.put(ident.image, physpVector);
			if(attr.image.equals("magnitude") || attr.image.contains("component")){
 		  		result = Converter.Force("N", msr.image, temp);
	    	}
	    	else if (attr.image.equals("angle")){
		  		result = Converter.Angle("degrees", msr.image, temp);
	    	}
	   		else {
				System.out.println(ColorCodes.RED + "Invalid mesurement for data type." + ColorCodes.RESET);
	    	}
	    	if(!Double.isNaN(result)) {
        		variables.put(ident.image, physpVector);
				System.out.println(ColorCodes.GREEN + result + ColorCodes.RESET);
      		}
      		else {
				System.out.println(ColorCodes.RED + "Cannot perform conversion for specified attribute." + ColorCodes.RESET);
	  		}
		}
      }
    }
    else {
      System.out.println(ColorCodes.RED + "Invalid identifier." + ColorCodes.RESET);
    }  }
|
  "remove " ident=<ID>
  {
    if(variables.containsKey(ident.image)) {
      variables.remove(ident.image);
    }
    else {		System.out.println(ColorCodes.RED + "Invalid identifier." + ColorCodes.RESET);
    }  }
|
  <QUESTION> ident=<ID> attr=<ATTRIBUTE> eql=<EQUALLITY> val=<DOUBLE>  {
    if(variables.containsKey(ident.image)) {
      double result = Double.NaN;	  if(variables.get(ident.image) instanceof PhysPObject) {
        PhysPObject physpObject = (PhysPObject)variables.get(ident.image);
        result = physpObject.getVariable(attr.image);
		variables.put(ident.image, physpObject);
      }
      else if(variables.get(ident.image) instanceof PhysPVector) {
		PhysPVector physpVector = (PhysPVector)variables.get(ident.image);
        result = physpVector.getVariable(attr.image);
		variables.put(ident.image, physpVector);
      }
      
      if(!Double.isNaN(result)) {
		if(eql.image.equals("equal to")) {			if(result == Double.parseDouble(val.image)) {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
        	else {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
		}
		else if (eql.image.equals("not equal to")) {			if(result == Double.parseDouble(val.image)) {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
        	else {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
		}
		else if (eql.image.equals("greater than")) {
		  if(result > Double.parseDouble(val.image)) {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
        	else {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}		}
		else if (eql.image.equals("less than")) {
		  if(result < Double.parseDouble(val.image)) {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
        	else {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
		}
		else if (eql.image.equals("greater than or equal to")) {
		  if(result >= Double.parseDouble(val.image)) {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
        	else {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
		}
		else if (eql.image.equals("less than or equal to")) {
		  if(result <= Double.parseDouble(val.image)) {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
        	else {
				System.out.println(ColorCodes.CYAN + "True." + ColorCodes.RESET);
        	}
		}
      }
    }
    else {
      System.out.println(ColorCodes.RED + "Invalid identifier." + ColorCodes.RESET);    }  }
}